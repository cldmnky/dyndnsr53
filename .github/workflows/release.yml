name: Release

on:
  push:
    tags:
      - 'v*'

env:
  REGISTRY: quay.io/cldmnky
  IMAGE_NAME: dyndnsr53

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23'
          cache: true

      - name: Download dependencies
        run: go mod download

      - name: Run tests
        run: go test -v ./...

      - name: Run tests with race detection
        run: go test -v -race ./...

      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v6
        with:
          version: v1.62.2

  build-and-push:
    name: Build and Push Container
    runs-on: ubuntu-latest
    needs: test
    outputs:
      tag: ${{ steps.extract_tag.outputs.tag }}
      image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23'
          cache: true

      - name: Extract tag version
        id: extract_tag
        run: |
          TAG=${GITHUB_REF#refs/tags/}
          echo "tag=${TAG}" >> $GITHUB_OUTPUT
          echo "version=${TAG}" >> $GITHUB_OUTPUT

      - name: Set up ko
        uses: ko-build/setup-ko@v0.7

      - name: Log in to Quay.io
        uses: docker/login-action@v3
        with:
          registry: quay.io
          username: ${{ secrets.QUAY_USERNAME }}
          password: ${{ secrets.QUAY_PASSWORD }}

      - name: Build and push multi-arch image with ko
        env:
          KO_DOCKER_REPO: ${{ env.REGISTRY }}
          VERSION: ${{ steps.extract_tag.outputs.version }}
          COMMIT: ${{ github.sha }}
          BUILD_DATE: ${{ github.event.head_commit.timestamp }}
        run: |
          echo "Building and pushing container image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.extract_tag.outputs.tag }}"
          echo "Platforms: linux/amd64,linux/arm64"
          echo "Tags: ${{ steps.extract_tag.outputs.tag }} and latest"
          
          ko build \
            --platform=linux/amd64,linux/arm64 \
            --tags=${{ steps.extract_tag.outputs.tag }},latest \
            --base-import-paths \
            --sbom=spdx \
            .

      - name: Generate build summary
        run: |
          echo "## 🚀 Release Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Tag:** \`${{ steps.extract_tag.outputs.tag }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Registry:** \`${{ env.REGISTRY }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Image:** \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📦 Published Images" >> $GITHUB_STEP_SUMMARY
          echo "- \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.extract_tag.outputs.tag }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🏗️ Build Details" >> $GITHUB_STEP_SUMMARY
          echo "- **Platforms:** linux/amd64, linux/arm64" >> $GITHUB_STEP_SUMMARY
          echo "- **SBOM:** Generated (SPDX format)" >> $GITHUB_STEP_SUMMARY
          echo "- **Base Images:** Distroless (via ko)" >> $GITHUB_STEP_SUMMARY
          echo "- **Security Scan:** Will be performed in next job" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🧪 Test Results" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Unit tests passed" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Race detection tests passed" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Linting passed" >> $GITHUB_STEP_SUMMARY

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build-and-push
    permissions:
      contents: read
      security-events: write
      actions: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ needs.build-and-push.outputs.image }}:${{ needs.build-and-push.outputs.tag }}
          format: 'table'
          output: 'trivy-results.txt'

      - name: Display security scan results
        if: always()
        run: |
          echo "## 🔒 Security Scan Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Image:** \`${{ needs.build-and-push.outputs.image }}:${{ needs.build-and-push.outputs.tag }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Vulnerability Report" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          cat trivy-results.txt >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

      - name: Upload security scan results as artifact
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: trivy-security-scan
          path: trivy-results.txt
          retention-days: 30

      - name: Run Trivy for SARIF (Advanced Security)
        uses: aquasecurity/trivy-action@master
        if: github.repository_owner == 'cldmnky'  # Only run if you have Advanced Security
        continue-on-error: true
        with:
          image-ref: ${{ needs.build-and-push.outputs.image }}:${{ needs.build-and-push.outputs.tag }}
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: github.repository_owner == 'cldmnky' && always()
        continue-on-error: true
        with:
          sarif_file: 'trivy-results.sarif'